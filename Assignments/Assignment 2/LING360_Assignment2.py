# -*- coding: utf-8 -*-
"""AhmetAltarLuser_Assignment 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14qNftnTc4V4cudmN0f75ztflrZgDB7tx

# Assignment 2 - Regular Expressions

This is <font color='cyan'>Assignment 2</font> for the LING360 - Computational Methods in Lingustics course and it is worth a total of  <font color='cyan'>**5 points**</font>.
The assignment covers the basics of Python and Regular Expressions. 

The topics include:
1. Regular Expressions
2. Lists
3. Printing with formatting

There's a total of  <font color='cyan'>**3 main tasks**</font>. For each task, please write your code between the following lines:

```
## YOUR CODE STARTS



## YOUR CODE ENDS
```

Before working on the assignment, please copy this notebook to your own drive. You can use ```Save a copy in Drive``` under the ```File``` menu on top left.

Please, run every cell in your code to make sure that it works properly before submitting it. 

Once you are ready to submit, download two versions of your code:

*   Download .ipynb
*   Download .py

These are both available under the ```File``` menu on top left. 

Then, compress your files (zip, rar, or whatever) and upload the compressed file to Moodle.

If you have any questions, please contact karahan.sahin@boun.edu.tr
"""

# RUN THIS LINE FIRST
import re

"""<font color='#FFBD33'>**Q1:**</font> `1.5 points`

Consider a regular language with $\Sigma = \{ a, c, l, o, s, y, git, ti, m, "\space" \}$. Translate the regular expressions below into strings. Notice that the order of string operations matters.

1. $y \cdot (a)^5 \cdot (s)^2$ 

1. $("\space" git)^3 \cdot (ti)^1 \cdot m$

1. $ ( c \cdot (o)^2 \cdot l )^2 \cdot ("\space" \cdot c \cdot (o))^3 \cdot ( c \cdot (o)^2 \cdot l)$
"""

# YOUR CODE STARTS

statement_1 = "y" + "a"*5 + "s"*2
statement_2 = ("\" \""+ "git")*3 + ("ti")*1 + "m"
statement_3 = ("c" + "o"*2 + "l")*2 + ("\" \"" + "c" + "o")*3 + ("c" + "o"*2 + "l")

print(statement_1 + "\n" + statement_2 + "\n" + statement_3)

# YOUR CODE END

"""<font color='#FFBD33'>**Q2:**</font> `1.5 points` 

For each date given in the `dates` list, find the day, month, and year information via a single regular expression and print the information using the format below:

`"Day: your_date, Month: your_month, Year: your_year"`. 

**For example:**

 * Day: 18, Month: 3, Year: 1915


<font color='#FFBD33'>**NOTES:**</font>

1. You must use only <font color='#FFBD33'>**one regex pattern**</font>  which you define at `YOUR_REGEX` in your `re.findall()`

1. You can either `for` loops or print each date by accessing it via an index.
"""

# DO NOT EDIT BELOW
dates = [
  "26.02.2022",
  "11/7/1982",
  "13-11-2055",
  "26  10 2022",
]
# DO NOT EDIT ABOVE

# YOUR CODE STARTS

YOUR_REGEX = re.compile("(\d{2})[ ./-]*([1-9]?[0-9])*[ ./-]*(\d{4})")
matches = re.findall(YOUR_REGEX, str(dates))
# Instead of doing it in two lines, we could utilized the following code alone: re.findall("(\d{2})[ ./-]*([1-9]?[0-9])*[ ./-]*(\d{4})", str(dates))

for date in matches:
   print("Day: {}, Month: {}, Year: {}".format(date[0], date[1], date[2]))
   
# YOUR CODE ENDS

"""<font color='#FFBD33'>**Q3:**</font> 
`2 points` As a linguist, your work contains analyzing the statistics of phenomena which you are investigating. For example, you might be interested in the frequency distribution of the accusative (ismin -i hali) and dative suffixes (ismin -e hali) in a corpus. To do that, you need to be able to identify words that end with one of these suffixes. The following task is a step towards writing some code that can identify some suffixes in Turkish. 


<font color='#FFBD33'>**INSTRUCTIONS:**</font>

Write some code that:

 * finds all subject-verb agreement suffixes using a regular expression.
 the suffixes in the `sentences` list using a regular expression.
 * returns a `list` of subject-verb agreement suffixes found in the `sentences` list. The name of your list must be `YOUR_SUFFIXES`.
 * finally, prints `YOUR_SUFFIXES` list. The output should look like:
   * `["suffix_1", "suffix_2", "suffix_3", ... ]`



<font color='#FFBD33'>**HINTS:**</font>

1. In order to add an item in a list, check the `list methods` in Lab 2.

1. In order to check multiple sequences, check the `disjunction` operator in the regex cheatsheet.

<font color='#FFBD33'>**NOTES:**</font>

1. Consider **unnecessary punctuations** at the end of the sentences.

1. To access each sentence in the list, you can either use `for` loops or indexing.

"""

sentences = [
 'ben geldim',
 'gördüm',
 'ama o daha gelmemişti.',
 'sen biliyorsun...',
 'onlar anlamazlar!',
 'nasılsınız?',
 'iyiyiz"',
]

YOUR_SUFFIXES = []
# YOUR CODE STARTS
suffix_detect = re.compile("(m|s[ıiuü]n|l[ae]r|s[ıiuü]n[ıiuü]z|y?[ıiuü]z)[^A-z]*$")
#matches = re.findall(suffix_detector, str(sentences))

for sentence in sentences:
  suffix = re.findall(suffix_detect, sentence)
  YOUR_SUFFIXES.append(suffix)

print("Suffixes: {}".format(YOUR_SUFFIXES))

# YOUR CODE ENDS